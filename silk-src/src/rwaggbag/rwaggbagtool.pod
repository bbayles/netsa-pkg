=pod

=head1 NAME

B<rwaggbagtool> - Manipulate binary Aggregate Bag files

=head1 SYNOPSIS

  rwaggbagtool
        [{ --remove-fields=REMOVE_LIST | --select-fields=SELECT_LIST
           | --to-bag=BAG_KEY,BAG_COUNTER
           | --to-ipset=FIELD [--ipset-record-version=VERSION] }]
        [--insert-field=FIELD=VALUE [--insert-field=FIELD2=VALUE2...]]
        [{ --add | --subtract | --divide }]
        [--zero-divisor-result={error | remove | maximum | VALUE}]
        [--scalar-multiply={VALUE | FIELD=VALUE}
          [--scalar-multiply={VALUE | FIELD=VALUE}...]]
        [--min-field=FIELD=VALUE [--min-field=FIELD=VALUE...]]
        [--max-field=FIELD=VALUE [--max-field=FIELD=VALUE...]]
        [--set-intersect=FIELD=FILE [--set-intersect=FIELD=FILE...]]
        [--set-complement=FIELD=FILE [--set-complement=FIELD=FILE...]]
        [--output-path=PATH [--modify-inplace [--backup-path=BACKUP]]]
        [--note-strip] [--note-add=TEXT] [--note-file-add=FILE]
        [--compression-method=COMP_METHOD]
        [--site-config-file=FILENAME]
        [AGGBAG_FILE [AGGBAG_FILE ...]]

  rwaggbagtool --help

  rwaggbagtool --help-fields

  rwaggbagtool --version

=head1 DESCRIPTION

B<rwaggbagtool> performs operations on one or more Aggregate Bag files
and creates a new Aggregate Bag file, a new Bag file, or an new IPset
file.  An I<Aggregate Bag> is a binary file that maps a key to a
counter, where the key and the counter are both composed of one or
more fields.  B<rwaggbag(1)> and B<rwaggbagbuild(1)> are the primary
tools used to create an Aggregate Bag file.  B<rwaggbagcat(1)> prints
a binary Aggregate Bag file as text.

The operations that B<rwaggbagtool> supports are field manipulation
(inserting or removing keys or counters), adding, subtracting, and
dividing counters (all files must have the same keys and counters)
across multiple Aggregate Bag files, multiplying all counters or only
selected counters by a value, intersecting with an IPset, selecting
rows based on minimum and maximum values of keys and counters, and
creating a new IPset or Bag file.

B<rwaggbagtool> processes the Aggregate Bag files listed on the
command line.  When no file names are specified, B<rwaggbagtool>
attempts to read an Aggregate Bag from the standard input.  To read
the standard input in addition to the named files, use C<-> or
C<stdin> as a file name.  If any input is not an Aggregate Bag file,
B<rwaggbagtool> prints an error to the standard error and exits with
an error status.

By default, B<rwaggbagtool>'s output is written to the standard
output.  Use B<--output-path> to specify a different location.  As of
SiLK 3.21.0, B<rwaggbagtool> supports the B<--modify-inplace> switch
which correctly handles the case when an input file is also used as
the output file.  That switch causes B<rwaggbagtool> to write the
output to a temporary file first and then replace the original output
file.  The B<--backup-path> switch may be used in conjunction with
B<--modify-inplace> to set the pathname where the original output file
is copied.

=head1 OPTIONS

Option names may be abbreviated if the abbreviation is unique or is an
exact match for an option.  A parameter to an option may be specified
as B<--arg>=I<param> or S<B<--arg> I<param>>, though the first form is
required for options that take optional parameters.

The options are presented here in the order in which B<rwaggbagtool>
performs them: Field manipulation switches are applied to each file
when it is read; multi-file operation switches combine the Aggregate
Bags together; single-file operation switches are applied; filtering
switches remove rows from the Aggregate Bag; the result is output as
an Aggregate Bag, a standard Bag, or as an IPset.

=head2 Field manipulation switches

The following switches allow modification of the fields in the
Aggregate Bag file.  The B<--remove-fields> and B<--select-fields>
switches are mutually exclusive, and they reduce the number of fields
in the Aggregate Bag input files.  Those switches also conflict with
B<--to-ipset> and B<--to-bag> which resemble field selectors.  The
B<--insert-field> switch is applied after B<--remove-fields> or
B<--select-fields>, and it adds a field unless that field is already
present.

=over 4

=item B<--remove-fields>=I<REMOVE_LIST>

Remove the fields specified in I<REMOVE_LIST> from each of the
Aggregate Bag input files, where I<REMOVE_LIST> is a comma-separated
list of field names.  This switch may include field names that are not
in an Aggregate Bag input, and those field names are ignored.  If a
field name is included in this list and in a B<--insert-field> switch,
the field is given the value specified by the B<--insert-field>
switch, and the field is included in the output Aggregate Bag file.
If removing a key field produces multiple copies of a key, the
counters of those keys are merged.  B<rwaggbagbuild> exits with an
error when this switch is used with B<--select-fields>, B<--to-ipset>,
or B<--to-bag>.

=item B<--select-fields>=I<SELECT_LIST>

For each Aggregate Bag input file, only use the fields in
I<SELECT_LIST>, a comma-separated list of field names.  Alternatively,
consider this switch as removing all fields that are not included in
I<SELECT_LIST>.  This switch may include field names that are not in an
Aggregate Bag input, and those field names are ignored.  When a field
name is included in this list and in a B<--insert-field> switch, the
field uses its value from the input Aggregate Bag file if present, and
it uses the value specified in the B<--insert-field> switch otherwise.
If selecting only some key fields produces multiple copies of a key,
the counters of those keys are merged.  B<rwaggbagbuild> exits with an
error when this switch is used with B<--remove-fields>, B<--to-ipset>,
or B<--to-bag>.

=item B<--insert-field>=I<FIELD>B<=>I<VALUE>

For each entry read from an Aggregate Bag input file, insert a field
named I<FIELD> and set its value to I<VALUE> if one of the following
is true: (1)the input file does not contain a field named I<FIELD> or
(2)the input file does have a field named I<FIELD> but it was removed
by either (2a)being listed in the B<--remove-fields> list or (2b)not
being listed in the B<--select-fields> list.  That is, this switch
only inserts I<FIELD> when I<FIELD> is not present in the input
Aggregate Bag, but specifying I<FIELD> in B<--remove-fields> removes
it from the input.  I<VALUE> is a textual representation of the
field's value as described in the description of the B<--fields>
switch in the B<rwaggbagbuild(1)> tool.  This switch may be repeated
in order to insert multiple fields.  If B<--to-ipset> or B<--to-bag>
is specified, B<--insert-field> may only name a field that is an
argument to that switch.

=back

=head2 Operations on multiple Aggregate Bag files

The following operations act on multiple Aggregate Bag files.  These
operations require all of the Aggregate Bag files to have the same set
of key fields and counter fields.  (Use the field manipulation
switches to ensure this.)  The values of the keys may differ, but the
set of fields that comprise the key must match.  It is an error if
multiple operations are specified.

=over 4

=item B<--add>

Sum each of the counters for each key for all the Aggregate Bag input
files.  The keys in the result are the union of the set of keys that
appear in all input files.  Addition operations that overflow an
unsigned 64-bit value are set to the maximum (18446744073709551615).
If no other operation is specified, the add operation is the default.

=item B<--subtract>

Subtract from the counters in the first Aggregate Bag file the
counters in the second Aggregate Bag file, and repeat the process for
each additional Aggregate Bag file.  The keys in the result are a
subset of the keys that appear in the first file: If a key does not
appear in the first Aggregate Bag file, its counters are ignored in
subsequent files.  If a key does not appear in the second file, its
counters in the first file are unchanged.  Subtraction operations that
result in a negative value are set to zero.  If all counters for a key
are zero, the key does not appear in the output.

=item B<--divide>

Divide the counters in first Aggregate Bag file by the second
Aggregate Bag file, and repeat the process for each additional
Aggregate Bag file.  The keys in the result are a subset of the keys
that appear in the first file: If a key does not appear in the first
Aggregate Bag file, its counters are ignored in subsequent files.  If
a key does not appear in the second file, its counters are treated as
zero and the outcome is determined by the action specified by
B<--zero-divisor-result>.  That option also determines the result when
the two Aggregate Bag files have matching keys but a counter in the
second bag is zero.  If B<--zero-divisor-result> is not given,
B<rwaggbagtool> exits with error if division by zero is detected.
Since Aggregate Bag files do not support floating point numbers, the
result of the division is rounded to the nearest integer (values
ending in .5 are rounded up).
I<Since SiLK 3.22.0.>

=back

While not an operation, the next switch is related to B<--divide> and
is described here.

=over 4

=item B<--zero-divisor-result>={ B<error> | B<remove> | B<maximum> | I<VALUE> }

Specify how to handle division by zero in the B<--divide> operation,
which can occur either because the first Aggregate Bag file (the
dividend) contains a key that does not exist in the second file (the
divisor) or because an individual counter in the divisor is zero.  The
supported arguments are:

=over 4

=item B<error>

Causes B<rwaggbagtool> to exit with an error.  This is the default
when B<--zero-divisor-result> is not given.

=item B<remove>

Tells B<rwaggbagtool> to remove this key from the output.

=item B<nochange>

Tells B<rwaggbagtool> to leave the individual counter in the first
Aggregate Bag unchanged.

=item B<maximum>

Sets the individual counter to the maximum value supported, which is
the maximum unsigned 64-bit value (18446744073709551615).

=item I<VALUE>

Sets the individual counter to I<VALUE>, which can be any unsigned
64-bit value (0 to 18446744073709551615 inclusive).

=back

This switch has no effect when B<--divide> is not used.
I<Since SiLK 3.22.0.>

=back

=head2 Counter operations

The following switch modifies the counters in an Aggregate Bag file.
The operation may be combined with any of those from the previous
section.  This operation occurs after the above and before any
filtering operation.

=over 4

=item B<--scalar-multiply>=I<VALUE>

=item B<--scalar-multiply>=I<FIELD>B<=>I<VALUE>

Multiply all counter fields or one counter field by a value.  If the
argument is a positive integer value (1 or greater), multiply all
counters by that value.  If the argument contains an equals sign,
treat the part to the left as a counter's field name and the part to
the right as the multiplier for that field: a non-negative integer
value (0 or greater).  The maximum I<VALUE> is 18446744073709551615.
This switch may be repeated; when a counter name is repeated or the
all-counters form is repeated, the final multiplier is the B<product>
of all the values.
I<Since SiLK 3.22.0.>

=back

=head2 Filtering switches

The following switches remove entries from the Aggregate Bag file
based on a field's value.  These switches are applied immediately
before the output is generated.

=over 4

=item B<--min-field>=I<FIELD>B<=>I<VALUE>

Remove from the Aggregate Bag file all entries where the value of the
field I<FIELD> is less than I<VALUE>, where I<VALUE> is a textual
representation of the field's value as described in the description of
the B<--fields> switch in the B<rwaggbagbuild(1)> tool.  This switch
is ignored if I<FIELD> is not present in the Aggregate Bag.  This
switch may be repeated.  I<Since SiLK 3.17.0.>

=item B<--max-field>=I<FIELD>B<=>I<VALUE>

Remove from the Aggregate Bag file all entries where the value of the
field I<FIELD> is greater than I<VALUE>, where I<VALUE> is a textual
representation of the field's value as described in the description of
the B<--fields> switch in the B<rwaggbagbuild(1)> tool.  This switch
is ignored if I<FIELD> is not present in the Aggregate Bag.  This
switch may be repeated.  I<Since SiLK 3.17.0.>

=item B<--set-intersect>=I<FIELD>B<=>I<SET_FILE>

Read an IPset from the stream I<SET_FILE>, and remove from the
Aggregate Bag file all entries where the value of the field I<FIELD>
is B<not> present in the IPset.  I<SET_FILE> may be the name a file or
the string C<-> or C<stdin> to read the IPset from the standard input.
This switch is ignored if I<FIELD> is not present in the Aggregate
Bag.  This switch may be repeated.  I<Since SiLK 3.17.0.>

=item B<--set-complement>=I<FIELD>B<=>I<SET_FILE>

Read an IPset from the stream I<SET_FILE>, and remove from the
Aggregate Bag file all entries where the value of the field I<FIELD>
is present in the IPset.  I<SET_FILE> may be the name a file or the
string C<-> or C<stdin> to read the IPset from the standard input.
This switch is ignored if I<FIELD> is not present in the Aggregate
Bag.  This switch may be repeated.  I<Since SiLK 3.17.0.>

=back

=head2 Output switches

The following switches control the output.

=over 4

=item B<--to-bag>=I<BAG_KEY>,I<BAG_COUNTER>

After operating on the Aggregate Bag input files, create a (normal)
Bag file from the resulting Aggregate Bag.  Use the I<BAG_KEY> field
as the key of the Bag, and the I<BAG_COUNTER> field as the counter of
the Bag.  Write the Bag to the standard output or the destination
specified by B<--output-path>.  When this switch is used, the only
legal field names that may be used in the B<--insert-field> switch are
I<BAG_KEY> and I<BAG_COUNTER>.  B<rwaggbagbuild> exits with an error
when this switch is used with B<--remove-fields>, B<--select-fields>,
or B<--to-ipset>.

=item B<--to-ipset>=I<FIELD>

After operating on the Aggregate Bag input files, create an IPset file
from the resulting Aggregate Bag by treating the values in the field
named I<FIELD> as IP addresses, inserting the IP addresses into the
IPset, and writing the IPset to the standard output or the destination
specified by B<--output-path>.  When this switch is used, the only
legal field name that may be used in the B<--insert-field> switch is
I<FIELD>.  B<rwaggbagbuild> exits with an error when this switch is
used with B<--remove-fields>, B<--select-fields>, or B<--to-bag>.

=item B<--ipset-record-version>=I<VERSION>

Specify the format of the IPset records that are written to the output
when the B<--to-ipset> switch is used.  I<VERSION> may be 2, 3, 4, 5
or the special value 0.  When the switch is not provided, the
SILK_IPSET_RECORD_VERSION environment variable is checked for a
version.  The default version is 0.

=over 4

=item S< 0 >

Use the default version for an IPv4 IPset and an IPv6 IPset.  Use the
B<--help> switch to see the versions used for your SiLK installation.

=item S< 2 >

Create a file that may hold only IPv4 addresses and is readable by all
versions of SiLK.

=item S< 3 >

Create a file that may hold IPv4 or IPv6 addresses and is readable by
S<SiLK 3.0> and later.

=item S< 4 >

Create a file that may hold IPv4 or IPv6 addresses and is readable by
S<SiLK 3.7> and later.  These files are more compact that version 3
and often more compact than version 2.

=item S< 5 >

Create a file that may hold only IPv6 addresses and is readable by
S<SiLK 3.14> and later.  When this version is specified, IPsets
containing only IPv4 addresses are written in version 4.  These files
are usually more compact that version 4.

=back

=item B<--output-path>=I<PATH>

Write the resulting Aggregate Bag, IPset (see B<--to-ipset>), or Bag
(see B<--to-bag>) to I<PATH>, where I<PATH> is a filename, a named
pipe, the keyword C<stderr> to write the output to the standard error,
or the keyword C<stdout> or C<-> to write the output to the standard
output.  If I<PATH> names an existing file, B<rwaggbagtool> exits with
an error unless the B<--modify-inplace> switch is given or the
SILK_CLOBBER environment variable is set, in which case I<PATH> is
overwritten.  If B<--output-path> is not given, the output is written
to the standard output.  Attempting to write the binary output to a
terminal causes B<rwaggbagtool> to exit with an error.

=item B<--modify-inplace>

Allow B<rwaggbagtool> to overwrite an existing file and properly
account for the output file (I<PATH>) also being an input file.  When
this switch is given, B<rwaggbagtool> writes the output to a temporary
location first, then overwrites I<PATH>.  B<rwaggbagtool> attempts to
copy the permission, owner, and group from the original file to the
new file.  The switch is ignored when I<PATH> does not exist or the
output is the standard output or standard error.  B<rwaggbagtool>
exits with an error when this switch is given and I<PATH> is not a
regular file.  If B<rwaggbagtool> encounters an error or is
interrupted prior to closing the temporary file, the temporary file is
removed.  See also B<--backup-path>.  I<Since SiLK 3.21.0.>

=item B<--backup-path>=I<BACKUP>

Move the file named by B<--output-path> (I<PATH>) to the path
I<BACKUP> immediately prior to moving the temporary file created by
B<--modify-inplace> over I<PATH>.  If I<BACKUP> names a directory, the
file is moved into that directory.  This switch will overwrite an
existing file.  If I<PATH> and I<BACKUP> point to the same location,
the output is written to I<PATH> and no backup is created.  If
B<BACKUP> cannot be created, the output is left in the temporary file
and B<rwaggbagtool> exits with a message and an error.
B<rwaggbagtool> exits with an error if this switch is given without
B<--modify-inplace>.  I<Since SiLK 3.21.0.>

=item B<--note-strip>

Do not copy the notes (annotations) from the input files to the output
file.  Normally notes from the input files are copied to the output.

=item B<--note-add>=I<TEXT>

Add the specified I<TEXT> to the header of the output file as an
annotation.  This switch may be repeated to add multiple annotations
to a file.  To view the annotations, use the B<rwfileinfo(1)> tool.

=item B<--note-file-add>=I<FILENAME>

Open I<FILENAME> and add the contents of that file to the header of
the output file as an annotation.    This switch may be repeated to
add multiple annotations.  Currently the application makes no effort
to ensure that I<FILENAME> contains text; be careful that you do not
attempt to add a SiLK data file as an annotation.

=item B<--compression-method>=I<COMP_METHOD>

Specify the compression library to use when writing output files.  If
this switch is not given, the value in the SILK_COMPRESSION_METHOD
environment variable is used if the value names an available
compression method.  When no compression method is specified,
output to the standard output or to named pipes is not compressed, and
output to files is compressed using the default chosen when SiLK was
compiled.  The valid values for I<COMP_METHOD> are determined by which
external libraries were found when SiLK was compiled.  To see the
available compression methods and the default method, use the
B<--help> or B<--version> switch.  SiLK can support the following
I<COMP_METHOD> values when the required libraries are available.

=over 4

=item none

Do not compress the output using an external library.

=item zlib

Use the B<zlib(3)> library for compressing the output, and always
compress the output regardless of the destination.  Using zlib
produces the smallest output files at the cost of speed.

=item lzo1x

Use the I<lzo1x> algorithm from the LZO real time compression library
for compression, and always compress the output regardless of the
destination.  This compression provides good compression with less
memory and CPU overhead.

=item snappy

Use the I<snappy> library for compression, and always compress the
output regardless of the destination.  This compression provides good
compression with less memory and CPU overhead.

=item best

Use lzo1x if available, otherwise use snappy if available, otherwise
use zlib if available.  Only compress the output when writing to a
file.

=back

=back

=head2 Miscellaneous switches

=over 4

=item B<--site-config-file>=I<FILENAME>

Read the SiLK site configuration from the named file I<FILENAME>.
When this switch is not provided, B<rwaggbagtool> searches for the
site configuration file in the locations specified in the L</FILES>
section.

=item B<--help>

Print the available options and exit.

=item B<--help-fields>

Print the names and descriptions of the fields that may be used in the
command line options that require a field name.
I<Since SiLK 3.22.0.>

=item B<--version>

Print the version number and information about how SiLK was
configured, then exit the application.

=back

=head1 EXAMPLES

In the following examples, the dollar sign (C<$>) represents the shell
prompt.  The text after the dollar sign represents the command line.
Lines have been wrapped for improved readability, and the back slash
(C<\>) is used to indicate a wrapped line.

=head2 Add two files

Read today's incoming flow records by type and use B<rwaggbag(1)> to
create an Aggregate Bag file for each, F<in.aggbag> and
F<inweb.aggbag>, that count records using the protocol and both ports
as the key.  Add the counters in the two files to create
F<total.aggbag>.  Use B<rwaggbagcat(1)> to display the result.

 $ rwfilter --type=in --all=-                               \
   | rwaggbag --key=sport,dport,proto --counter=records     \
        --output-path=in.aggbag
 $ rwfilter --type=inweb --all=-                            \
   | rwaggbag --key=sport,dport,proto --counter=records     \
        --output-path=inweb.aggbag
 $ rwaggbagtool --add in.aggbag inweb.aggbag --output-path=total.aggbag
 $ rwaggbagcat total.aggbag

=head2 Subtract a file

Subtract F<inweb.aggbag> from F<total.aggbag>.

 $ rwaggbagtool --subtract total.aggbag inweb.aggbag    \
   | rwaggbagcat

=head2 Percent of traffic

Compute the percent of all incoming traffic per protocol and ports
that was stored in the B<inweb> type by multiplying the counters in
F<inweb.aggbag> by 100 and dividing by F<total.aggbag>.

 $ rwaggbagtool --scalar-multiply=100 inweb.aggbag  \
   | rwaggbagtool --divide stdin total.aggbag       \
   | rwaggbagcat

=head2 Create a file

Create an Aggregate Bag file from F<data.rw> where the ports are the
key and that sums the bytes and packets.

 $ rwaggbag --key=sport,dport                       \
        --counter=sum-bytes,sum-packets data.rw     \
        --output-path=my-ab.aggbag

=head2 Choose selected fields

Using the previous file, get just the source port and byte count from
the file F<my-ab.aggbag>.  One approach is to remove the destination
port and packet count.

 $ rwaggbagtool --remove=dport,sum-packets my-ab.aggbag  \
        --output-path=source-bytes.aggbag

The other approach selects the source port and byte count.

 $ rwaggbagtool --select=sport,sum-bytes my-ag.aggbag    \
        --output-path=source-bytes.aggbag

To replace the packet count in F<my-ab.aggbag> with zeros, remove the
field and insert it with the value you want.

 $ rwaggbagtool --remove=sum-packets --insert=sum-packets=0  \
        my-ab.aggbag --output-path=zero-packets.aggbag

=head2 Convert to different formats

To create a regular Bag with the source port and byte count from
F<my-ab.aggbag>, use the B<--to-bag> switch:

 $ rwaggbagtool --to-bag=sport,sum-bytes my-ab.aggbag  \
        --output-path=sport-byte.bag

The B<--to-ipset> switch works similarly:

 $ rwaggbag --key=sipv6,dipv6 --counter=records data-v6.rw  \
        --output-path=ips.aggbag
 $ rwaggbagtool --to-ipset=dipv6 --output-path=dip.set


=head1 ENVIRONMENT

=over 4

=item SILK_IPSET_RECORD_VERSION

This environment variable is used as the value for the
B<--ipset-record-version> when that switch is not provided.

=item SILK_CLOBBER

The SiLK tools normally refuse to overwrite existing files.  Setting
SILK_CLOBBER to a non-empty value removes this restriction.

=item SILK_COMPRESSION_METHOD

This environment variable is used as the value for
B<--compression-method> when that switch is not provided.

=item SILK_CONFIG_FILE

This environment variable is used as the value for the
B<--site-config-file> when that switch is not provided.

=item SILK_DATA_ROOTDIR

This environment variable specifies the root directory of data
repository.  As described in the L</FILES> section, B<rwaggbagtool>
may use this environment variable when searching for the SiLK site
configuration file.

=item SILK_PATH

This environment variable gives the root of the install tree.  When
searching for configuration files, B<rwaggbagtool> may use this
environment variable.  See the L</FILES> section for details.

=back

=head1 FILES

=over 4

=item F<${SILK_CONFIG_FILE}>

=item F<${SILK_DATA_ROOTDIR}/silk.conf>

=item F<@SILK_DATA_ROOTDIR@/silk.conf>

=item F<${SILK_PATH}/share/silk/silk.conf>

=item F<${SILK_PATH}/share/silk.conf>

=item F<@prefix@/share/silk/silk.conf>

=item F<@prefix@/share/silk.conf>

Possible locations for the SiLK site configuration file which are
checked when the B<--site-config-file> switch is not provided.

=back

=head1 NOTES

The Aggregate Bag tools were added in SiLK 3.15.0.

SiLK 3.17.0 added the B<--min-field>, B<--max-field>,
B<--set-intersect>, and B<--set-complement> switches.

Support for country codes was added in SiLK 3.19.0.

The B<--modify-inplace> switch was added in SiLK 3.21.  When
B<--backup-path> is also given, there is a small time window when the
original file does not exist: the time between moving the original
file to the backup location and moving the temporary file into place.

=head1 SEE ALSO

B<rwaggbag(1)>, B<rwaggbagbuild(1)>, B<rwaggbagcat(1)>,
B<rwfilter(1)>, B<rwfileinfo(1)>, B<silk(7)>, B<zlib(3)>

=cut

$SiLK: rwaggbagtool.pod e95eb8cd5b0c 2023-09-05 21:09:53Z mthomas $

Local Variables:
mode:text
indent-tabs-mode:nil
End:
